#!/usr/bin/bash

# Github Gist creator
# Dependancies: gh (github cli tool)
# After you are authenticated with the gh tool, you can call this command
# from within vim / neovim.
# Visual select the section you want to make a Gist of and then pipe
# it into this "g" command.
# Optionally, you can add 2 extra lines to your selection: prefixed with 
# "gt:" and "gd:" respectively.
# A line prefixed with "gt:" will take what's after the ":" ad set that 
# as the Gist's title,
# A line prefixed with "gd:" will take what's after the ":" and set that
# as the Gist's description.
# Both of those extra lines will be removed when running the selection through
# this command.

temp_file_name=/tmp/gist.txt
rm "$temp_file_name"
touch "$temp_file_name"

if [[ -z "$VIMRUNTIME" ]]; then
    printf "Please use this command from inside Vim/Neovim.\n"
    printf "Visually select lines in a buffer, and then \n"
    printf "run \"gist\" as a filter command.\n"
    exit 1
fi

gist_title=""
gist_description=""

while IFS= read -r line; do
    trimmed_line=$(echo "$line" | xargs)
    case "$trimmed_line" in
        gt:*)
            gist_title=$(echo "${trimmed_line##gt:}" | xargs)
            continue
            ;;
        gd:*)
            gist_description=$(echo "${trimmed_line##gd:}" | xargs)
            continue
            ;;
    esac

    echo "$line"
    echo "$line" >> "$temp_file_name"
done

params=()

if [[ -n "$gist_title" ]]; then
    params+=(--filename "$gist_title")
fi

if [[ -n "$gist_description" ]]; then
    params+=(--desc "$gist_description")
fi

gh gist create "${params[@]}" --public < "$temp_file_name" &> /dev/null
