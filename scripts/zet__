#!/usr/bin/bash

declare -a commands=(date new find latest)

export LUPO_DIRECTORY="$HOME/Zet"

if [[ -n $COMP_LINE ]]; then
	for c in "${commands[@]}"; do
		[[ ${c:0:${#2}} == "${2,,}" ]] && echo "$c"
	done
	exit
fi

_date() {
	while read -r line; do
		now=$(date +%Y%m%d%H%M%S)
		line="${line} ($now)"
		echo "$line"
	done
}

_new() {
	exec lupo new "Zet" "" "switch_after_open"
}

_find() {
	exec lupo find "Zet" "" "switch_after_open"
}

_latest() {
	exec lupo latest "Zet" "" "switch_after_open"
}

_grab() {
	full_path=$(lupo new "Zet" "" "switch_after_open")

	declare -a lines=()
	while IFS= read -r line; do
		lines+=("${line/$/\\$}")
	done

	if ((${#lines[@]} > 0)); then
		echo -e "\`\`\`php" >>"$full_path"
		for line in "${lines[@]}"; do
			echo -e "${line/\\$/\$}" >>"$full_path"
			echo -e "${line/\\$/\$}"
		done
		echo -e "\`\`\`" >>"$full_path"
	fi
}

declare CMD="$1"
shift

if [[ -z "$CMD" ]]; then
	if [[ -z "$VIMRUNTIME" ]]; then
		echo -e "  Did you mean \"zet new\"?\n  Running \"zet\" alone triggers its 'grab' function.\n  This is intended to be used after visually selecting lines in vim."
		exit 1
	fi

	_grab
	exit $?
fi

for c in "${commands[@]}"; do
	[[ $c == "$CMD" ]] && "_$c" "$@" && exit $?
done
